rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function signedIn() { return request.auth != null; }

    // Simple role check: a user is an admin if roles/{uid}.admin == true
    function isAdmin() {
      return signedIn() &&
        exists(/databases/$(db)/documents/roles/$(request.auth.uid)) &&
        get(/databases/$(db)/documents/roles/$(request.auth.uid)).data.admin == true;
    }

    // --- LISTINGS ---
    // Public read. Create by owner. Update/Delete by owner OR admin.
    match /listings/{id} {
      allow read: if true;

      // Create: must be signed-in owner; basic shape checks
      allow create: if signedIn()
        && request.resource.data.sellerID == request.auth.uid
        && request.resource.data.price is number
        && request.resource.data.price >= 0
        && (request.resource.data.status in ['active','pending'])
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp;

      // Update: owner or admin. Keep sellerID immutable. If price/status provided, validate.
      allow update: if signedIn()
        && (resource.data.sellerID == request.auth.uid || isAdmin())
        && request.resource.data.sellerID == resource.data.sellerID
        && (
          // if price provided, it must be a non-negative number
          (('price' in request.resource.data) ? (request.resource.data.price is number && request.resource.data.price >= 0) : true)
        )
        && (
          // if status provided, it must be one of the allowed values
          (('status' in request.resource.data) ? (request.resource.data.status in ['active','pending','sold','removed']) : true)
        )
        && (request.resource.data.updatedAt is timestamp);

      // Delete: owner or admin
      allow delete: if signedIn()
        && (resource.data.sellerID == request.auth.uid || isAdmin());
    }

    // --- ROLES ---
    // Allow users to read their own role doc (to check admin); admins can read any.
    // Lock writes from clients; set via Console or Admin SDK only.
    match /roles/{uid} {
      allow read: if signedIn() && (uid == request.auth.uid || isAdmin());
      allow write: if false;
    }

    // --- REQUESTS (boards/posts) ---
    // Public reads. Create by owner. Update/Delete by owner OR admin.
    match /requests/{board}/posts/{postId} {
      allow read: if true;

      // Create must come from the signed-in user with createdBy == uid
      allow create: if signedIn()
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.createdAt is timestamp;

      // Update/Delete: owner or admin
      allow update, delete: if signedIn()
        && (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    // --- USERS / WISHLIST ---
    match /users/{uid} {
      match /saved/{listingId} {
        allow read, write: if signedIn() && request.auth.uid == uid;
      }
    }

    // --- CHATS ---
    match /chats/{chatId} {
      // Creating a chat: the creator must be in participants
      allow create: if signedIn()
        && (request.resource.data.participants is list)
        && (request.auth.uid in request.resource.data.participants)
        && (request.resource.data.listingId is string)
        && (request.resource.data.createdAt is timestamp);

      // Read/Update/Delete existing chat: only participants
      allow read, update, delete: if signedIn()
        && (resource.data.participants is list)
        && (request.auth.uid in resource.data.participants);

      // Messages subcollection
      match /messages/{msgId} {
        function chatParticipants() {
          return get(/databases/$(db)/documents/chats/$(chatId)).data.participants;
        }
        // Only participants can read messages
        allow read: if signedIn() && (request.auth.uid in chatParticipants());

        // Only participants can create messages with their own senderId and a timestamp
        allow create: if signedIn()
          && (request.auth.uid in chatParticipants())
          && (request.resource.data.senderId == request.auth.uid)
          && (request.resource.data.text is string)
          && (request.resource.data.sentAt is timestamp);

        // Sender may delete their own message (optional)
        allow delete: if signedIn()
          && (request.auth.uid in chatParticipants())
          && (resource.data.senderId == request.auth.uid);
      }
    }
  }
}