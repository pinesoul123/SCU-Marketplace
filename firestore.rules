rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function signedIn() { return request.auth != null; }

    // Listings: public read, owners can create/update/delete
    match /listings/{id} {
      allow read: if true;
      allow create: if signedIn()
        && request.resource.data.sellerID == request.auth.uid
        && request.resource.data.price is number
        && request.resource.data.price >= 0
        && (request.resource.data.status in ['active','pending','sold'])
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp;
      allow update, delete: if signedIn()
        && resource.data.sellerID == request.auth.uid;
    }

    // Per-user documents (wishlist)
    match /users/{uid} {
      // Wishlist (saved items): only the owner can read/write
      match /saved/{listingId} {
        allow read, write: if signedIn() && request.auth.uid == uid;
      }
    }

    // Chats: participants-only access
    match /chats/{chatId} {
      // Creating a chat: the creator must be part of participants on write
      allow create: if signedIn()
        && (request.resource.data.participants is list)
        && (request.auth.uid in request.resource.data.participants)
        && (request.resource.data.listingId is string)
        && (request.resource.data.createdAt is timestamp);

      // Reading/updating/deleting an existing chat: only participants
      allow read, update, delete: if signedIn()
        && (resource.data.participants is list)
        && (request.auth.uid in resource.data.participants);

      // Messages subcollection
      match /messages/{msgId} {
        function chatParticipants() {
          return get(/databases/$(db)/documents/chats/$(chatId)).data.participants;
        }

        // Only participants can read messages
        allow read: if signedIn() && (request.auth.uid in chatParticipants());

        // Only participants can post messages; must set their own senderId and timestamp
        allow create: if signedIn()
          && (request.auth.uid in chatParticipants())
          && (request.resource.data.senderId == request.auth.uid)
          && (request.resource.data.text is string)
          && (request.resource.data.sentAt is timestamp);

        // Allow delete by sender (optional)
        allow delete: if signedIn()
          && (request.auth.uid in chatParticipants())
          && (resource.data.senderId == request.auth.uid);
      }
    }
  }
}